plot(c(1,34,56,23,11))
72+59
72+59
1+3+5
sum(1,5,9)
sum(1,5,9)
1+3+5
sum(1,5,9)
plot(c(1,2,3,4))
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
qplot(x = c(1,2,3,4), y=c(2,1,4,3))
library("tidyverse")
qplot(x = c(1,2,3,4), y=c(2,1,4,3))
install.packages("gapminder")
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(tidyverse)
View(gapminder)
qplot(x = gdpPercap, y = lifeExp, data = gapminder)
diabobes <- read.csv("obesity-diabetes.csv")
diabobes
qplot(x = diab,
y = obes,
data = diabobes,
color = region,
shape = region,
size = I(3))
library(tidyverse)
library(gapminder)
qplot(x = diab,
y = obes,
data = diabobes,
color = region,
shape = region,
size = I(3))
View(diabobes)
?<NAME OF THE FUNCTION>
#?<NAME OF THE FUNCTION>
?qplot
qplot(gdpPercap, lifeExp, data = gapminder, facets = ~year)
qplot(x = gdpPercap,
y = lifeExp,
geom = c('point', 'smooth'),
data = gapminder)
qplot(x = gdpPercap,
y = lifeExp,
geom = c('point', 'smooth'),
data = gapminder,
facets = ~year)
library(tidyverse)
diamonds
diamonds <- diamonds
View(diamonds)
qplot(depth, price, color = cut, data = diamonds)
qplot(depth, price, color = I('blue'), data = diamonds)
qplot(depth, price, color = cut, data = diamonds)
library(diamonds)
qplot(depth, price, color = cut, data = diamonds)
install.packages("nycflights13")
library(nycflights13)
flights
filter(flights, month ==3)
# all month, second half of each of them
filter(flights, day >= 15)
#Third day of March
filter(flights, month == 3 & day == 3)
library(tidyverse)
midwest
qplot(popdensity,
percbelowpoverty,
data = midwest,
geom = "point")
qplot(popdensity,
percbelowpoverty,
data = midwest)
qplot(popdensity,
percbelowpoverty,
data = midwest,
facets = _inmetro)
qplot(popdensity,
percbelowpoverty,
data = midwest,
facets = ~inmetro)
View(midwest)
ob <- read.csv("obes_diab_trend.csv")
View(ob)
qplot(year, prevalence, data = ob, facets = ~condition)
qplot(year, prevalence, data = ob, color = ~condition)
qplot(year, prevalence, data = ob, color = condition)
qplot(year, prevalence, data = ob, geom = "line", color = condition)
```{r message=FALSE warning=FALSE}
```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(tidyverse)
library(nycflights13)
library(gapminder)
filter(flights, month==1 | month==2 | month==3 | month==4 | month==5)
View(gapminder)
new_gap <- filter(gapminder, country %in% c("Brazil", "India", "China"))
View(new_gap)
qplot(year, lifeExp, data = new_gap, geom = "line")
qplot(year, lifeExp, data = new_gap, geom = "line", color = country)
mean(c(1,2,3,NA,4,5), na.rm = TRUE)
starwars
View(starwars)
# starwars is a dataset known to have missing values
filter(starwars, is.na(hair_color))
# all characters with hair_color NA or "none"
filter(starwars, hair_color == "none" | is.na(hair_color))
View(flights)
# second parameter is the name of the new column
mutate(flights, in_flight_gain = dep_delay - arr_delay)
mutate(flights, air_time_hours = air_time/60)
mutate(flights, dist_prop_mean = distance/mean(distance))
# gapminder draw gdpPercap v. lifeExp for year 1952
gap52 <- filter(gapminder, year == 1952)
qplot(gdpPercap, lifeExp, data = gap52)
# gapminder draw gdpPercap v. lifeExp for year 1952
gap52 <- filter(gapminder, year == 1952) %>%
mutate(log_gdp = log(gdpPercap))
qplot(log_gdp, lifeExp, data = gap52)
1 %>% sum(2,3)
gapnew <- gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap)) %>%
filter(continent = "Asia") %>%
mutate(tot_gdp = gdpPercap * pop)
gapnew <- gapminder %>%
filter(year == 1952) %>%
mutate(log_gdp = log(gdpPercap)) %>%
filter(continent == "Asia") %>%
mutate(tot_gdp = gdpPercap * pop)
library(gapminder)
gap <- gapminder %>%
filter(year == 2002 | year == 2007)
library(tidyverse)
gap <- gapminder %>%
filter(year == 2002 | year == 2007)
View(gap)
qplot(gdpPercap,
lifeExp,
data = gapminder)
qplot(gdpPercap,
lifeExp,
data = gap)
diabobes <- read.csv("obesity-diabetes.csv")
S_diab <- read.csv("S-obesity-diabetes.csv")
S_inc <- read.csv("ACS-south-2017.csv")
diabobes <- read.csv("obesity-diabetes.csv")
S_diab <- read.csv("S-obesity-diabetes.csv")
S_inc <- read.csv("ACS-south-2017.csv")
qplot(x = gdpPercap,
y = lifeExp,
data = gapminder,
facets = continent~year)
qplot(x = gdpPercap,
y = lifeExp,
data = gapminder,
size = I(0.5),
facets = continent~year)
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 0.5) +
facet_grid(continent~year)
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point(size = 0.5) +
facet_grid(continent~year, scales = "free")
ggplot()
ggplot() +
geom_point(mapping = aes(x = 799, y = 28.8))
ggplot() +
geom_point(mapping = aes(x = 799, y = 28.8)) +
geom_point(mapping = aes(x = 821, y = 30.3))
ggplot()+
geom_point(data = gapminder,
mapping = aes(x = depPercap, y = lifeExp))
ggplot()+
geom_point(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
ggplot()+
geom_point(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_smooth(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point() +
geom_smooth() +
xlab("New name for x-axis") +
ylab("New name for y-axis") +
theme_light()
setwd("~/GitHub/CompLegFall2019/labs/DTMs")
# Jeff wd
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Examples/')
setwd("~/GitHub/CompLegFall2019/data/canadaTextParsing/Examples")
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("quanteda", "stringr", "tm"), pkgTest)
# load speeches data from 38th parliament
speechesDF <- read.csv("canada_floor_speeches.csv", stringsAsFactors = F, encoding = "UTF-8")
clean_text <- function(inputVec){
# lowercase
tempVec <- tolower(inputVec)
# remove everything that is not a number or letter
tempVec <- str_replace_all(tempVec,"[^a-zA-Z\\s]", " ")
# make sure all spaces are just one white space
tempVec <- str_replace_all(tempVec,"[\\s]+", " ")
# remove blank words
tempVec <- tempVec[which(tempVec!="")]
#browser()
# tokenize (split on each word)
tempVec <- str_split(tempVec, " ")[[1]]
# create function for removing stop words
remove_words <- function(str, stopwords) {
x <- unlist(strsplit(str, " "))
x <- x[!x %in% stopwords]
# remove single letter words
return(x[nchar(x) > 1])
}
# remove stop words
tempVec <- remove_words(tempVec, stopwords("english"))
# get count of each word in "document"
count_df <- data.frame(document=row,
count=rle(sort(tempVec))[[1]],
word=rle(sort(tempVec))[[2]])
return(count_df)
}
# create new vector that we will continuously append via rbind
# probably not the most computationally efficient way to do this...
all_words <- NULL
# loop over all rows in original DF of speeches
for(row in 1:dim(speechesDF)[1]){
all_words <- rbind(all_words, clean_text(speechesDF[row, "paragraph_text"]))
}
# find unique words in word matrix
unique(all_words$word)
DTM <- matrix(0, nrow=dim(speechesDF)[1], ncol=length(unique(all_words$word)))
# assign column names of DTM to be the unique words (in alpha order)
colnames(DTM) <- unique(all_words$word)
# loop over each "document"/paragraph
for(document in 1:dim(speechesDF)[1]){
# find all the words that are used in that paragraph
document_subset <- all_words[which(all_words$document==document),]
# loop over each word
for(row in 1:dim(document_subset)[1]){
# and check which column it's in
DTM[document, which(colnames(DTM)==document_subset[row, "word"] )] <- all_words[row, "count"]
}
}
setwd("~/GitHub/CompLegFall2019/labs")
setwd("~/GitHub/CompLegFall2019/labs/DTMs")
View(DTM)
str(DTM)
k = DTM[1:3,]
sum(k[1])
sum(k[2])
sum(k[3])
k[1]
k[1,]
sum(k[1,])
sum(k[2,])
sum(k[3,])
cen = sum(k)
cen = sum(k[,])
cen[1] = sum(k[1,])
cen[2] = sum(k[2,])
cen[3] = sum(k[3,])
k = DTM[c(1,30,50),]
cen[1] = sum(k[1,])
cen[2] = sum(k[2,])
cen[3] = sum(k[3,])
str(DTM)
k = DTM[c(25,50,75),]
cen[1] = sum(k[1,])
cen[2] = sum(k[2,])
cen[3] = sum(k[3,])
k1 = DTM[1:32,]
k2 = DTM[33:65,]
k3 = DTM[65:97,]
cen[1] = colMeans(k1)
k = DTM[c(25,50,75),]
k1 = DTM[1:32,]
k2 = DTM[33:65,]
k3 = DTM[65:97,]
cen1 = colMeans(k1)
cen2 = colMeans(k2)
k3 = DTM[65:96,]
str(DTM)
k1 = DTM[1:31,]
k2 = DTM[32:63,]
k3 = DTM[64:94,]
cen1 = colMeans(k1)
cen2 = colMeans(k2)
cen3 = colMeans(k3)
(k1-cen1)^2
dis1 = (k1-cen1)^2
dis2 = (k2-cen2)^2
dis3 = (k3-cen3)^2
k = c(k1,k2,k3)
